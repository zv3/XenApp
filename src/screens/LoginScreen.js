import React from 'react';
import {
    View, TextInput, StyleSheet, ActivityIndicator, Alert,
    Text
} from 'react-native';

import {Config} from '../Config'
import {apiFetcher} from "../helpers/apiFetcher"

import {style} from "../Style"
import {Button} from "../components/Button"
import {dataDecrypter, dataEncrypter, passwordEncrypter} from "../helpers/encrypter";
import {dataStore} from "../data/dataStore"
import {objectStore} from "../data/objectStore";
import {isPlainObject} from "../helpers/funcs";
import {simpleEventDispatcher} from "../events/simpleEventDispatcher";

export default class LoginScreen extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            focusField: '',
            data: {},
            isLoading: false,
            isTfaVerify: false
        };
    }

    _doLogin() {
        if (!this.state.data.username || !this.state.data.password) {
            return;
        }

        this.setState({
            isLoading: true
        });

        let payload = {
            username: this.state.data.username,
            password: passwordEncrypter(this.state.data.password),
            grant_type: 'password',
            client_id: Config.clientId,
            password_algo: 'aes128'
        };

        if (this.state.data.code) {
            payload['code'] = this.state.data.code;
            payload['tfa_provider'] = 'totp';
        }

        const _doFetchUser = async (accessToken) => {
            await apiFetcher.get(`users/me?oauth_token=${accessToken}`, {}, {
                onSuccess: (data) => {
                    objectStore.set(Config.Constants.VISITOR, data.user);
                    simpleEventDispatcher.fire('logged');
                }
            });
        };

        apiFetcher.post('oauth/token', payload, {
            onSuccess: (data, statusCode) => {
                if (data.hasOwnProperty('access_token')) {
                    dataStore.put(Config.Constants.OAUTH_DATA, data);
                    objectStore.set(Config.Constants.OAUTH_DATA, data);

                    _doFetchUser(data.access_token);

                    this.props.navigation.navigate(Config.Constants.SCREEN_HOME);

                    return;
                }

                if (statusCode === 202) {
                    // required TFA to login.
                    this.setState({ isTfaVerify: true, isLoading: false });
                }
            },
            onError: (errors) => {
                this.setState({ isLoading: false });

                let errorShown;
                if (isPlainObject(errors)) {
                    errorShown = errors[0];
                }

                Alert.alert(
                    'Invalid password',
                    errorShown ? errorShown : 'Please enter valid password'
                );
            }
        });
    }

    _goToRegister() {
        this.props.navigation.navigate(Config.Constants.SCREEN_REGISTER);
    }

    _updateDataState(fieldId, value) {
        this.setState(prevState => ({
            ...prevState,
            data: {
                ...prevState.data,
                [fieldId]: value
            }
        }));
    }

    _doRenderField(fieldId, placeholder, autoFocus = false) {
        let secureTextEntry = false, keyboardType = 'default';
        if (fieldId.indexOf('password') === 0) {
            secureTextEntry = true;
        }

        let inputFocusStyle;
        if (this.state.focusField === fieldId) {
            inputFocusStyle = style.input.focus;
        }

        return (
            <TextInput
                placeholder={placeholder}
                placeholderTextColor={style.input.placeholder.color}
                secureTextEntry={secureTextEntry}
                editable={!this.state.isLoading}
                keyboardType={keyboardType}
                autoFocus={autoFocus}
                onFocus={() => this.setState({ focusField: fieldId })}
                onChangeText={(text) => this._updateDataState(fieldId, text)}
                style={[style.input.normal, inputFocusStyle]}
            />
        );
    }


    render() {
        let loadingIndicator;
        if (this.state.isLoading) {
            loadingIndicator = <ActivityIndicator/>;
        }

        const containerStyle = StyleSheet.create({
            container: {
                paddingLeft: 15,
                paddingRight: 15,
                paddingTop: 230,
                paddingBottom: 30
            }
        });

        if (this.state.isTfaVerify) {
            return (
                <View style={containerStyle.container}>
                    <Text style={{ textAlign: 'center', fontSize: 15, fontWeight: 'bold' }}>Two-step verification required</Text>
                    <Text style={{ textAlign: 'center', marginTop: 20, marginBottom: 10 }}>Please enter the verification code generated by the app on your phone.</Text>

                    {this._doRenderField('code', 'Verification Code', true)}

                    <Button text="CONFIRM"
                            disabled={this.state.isLoading}
                            iconView={loadingIndicator}
                            onPress={() => this._doLogin()}/>
                </View>
            );
        }

        return (
            <View style={containerStyle.container}>
                {this._doRenderField('username', 'User Name or Email', true)}
                {this._doRenderField('password', 'Password')}

                <Button text="LOG IN"
                        disabled={this.state.isLoading}
                        iconView={loadingIndicator}
                        onPress={() => this._doLogin()}/>

                <Button text="Don't have an account?"
                        type="default"
                        style={{ marginTop: 10 }}
                        onPress={() => this._goToRegister()} />
            </View>
        );
    }
}